# Grammar & Style Standards

<introduction>
Technical writing standards for Matt Palmer's content. For brand voice modes, see [`personal-brand.md`](personal-brand.md). For XML structure, see [`prompt-structure.md`](prompt-structure.md).
</introduction>

<core_principles>
<clarity>Write to express, not impress. 8th-grade reading level. One idea per sentence.</clarity>
<conciseness>Eliminate unnecessary words. Active > passive voice. Cut fillers ("very," "really").</conciseness>
<consistency>Same voice throughout. Consistent terminology and patterns.</consistency>
</core_principles>

<grammar_essentials>
<subjects_verbs>
- Singular subjects + singular verbs: "Developer codes"
- Plural subjects + plural verbs: "Developers code"
- Collective nouns usually singular: "Team is working"
- Watch intervening phrases: "List of features is complete"
</subjects_verbs>

<pronouns>
- Clear antecedents: "When developers use AI tools, they become productive"
- "Who" for people, "that/which" for things
- No pronoun shifts: "When you code, you should..." (not "one should")
</pronouns>

<verb_tenses>
- Present: current facts ("AI assists developers")
- Past: completed actions ("We tested the framework")
- Future: planned actions ("We will release next week")
- Stay consistent within sections
</verb_tenses>

<modifiers>
- Place close to what they modify
- Avoid dangling: "Using AI tools, developers improved code quality" ✓
- Not: "Using AI tools, code quality improved" ✗
</modifiers>
</grammar_essentials>

<punctuation>
<commas>Oxford comma required: "React, Vue, and Angular"</commas>
<apostrophes>Contractions: "don't", "it's". Possession: "user's code". Never plurals: "APIs" not "API's"</apostrophes>
<dashes>Hyphens for compounds: "AI-assisted". Em dashes for thoughts: "Framework—which we'll cover—revolutionizes development"</dashes>
<quotes>Periods/commas inside: "Best approach," she said, "is vibe coding."</quotes>
</punctuation>

<capitalization>
<proper_nouns>Tools: "GitHub", "React", "TypeScript". Always "AI" for artificial intelligence.</proper_nouns>
<headings>Sentence case: "Building your first AI app"</headings>
<technical>Follow conventions: "JavaScript" not "Javascript", "API" not "api"</technical>
</capitalization>

<voice_mode_applications>
<formal_mode>
<when>Blog posts, documentation, professional content</when>
<standards>
- Complete sentences and proper grammar
- Technical precision and clarity
- Professional terminology
- Oxford commas, proper capitalization
- Code formatting: `inline` and ```blocks```
</standards>
</formal_mode>

<casual_mode>
<when>Twitter, casual social media</when>
<flexibility>
- Lowercase styling acceptable: "just shipped my ai app"
- Abbreviations: "AI" → "ai", "you" → "u" (strategic)
- Contractions encouraged: "don't", "can't", "we're"
- Sentence fragments OK for impact
- Relaxed punctuation (strategic omission)
</flexibility>
</casual_mode>

<authentic_mode>
<when>Personal stories, community content</when>
<balance>
- Mix formal/casual based on message
- Strategic imperfection for relatability
- Maintain clarity while being conversational
- Use ellipses for pause/thought: "Yesterday I built something..."
- Emoji usage: sparingly, for personality
</balance>
</authentic_mode>
</voice_mode_applications>

<format_specific_guidelines>
<blog_posts>Descriptive headings, compelling intros, clear CTAs, keyword inclusion</blog_posts>
<social_media>Platform-appropriate tone, strategic hashtags, character limits, value propositions</social_media>
<documentation>Imperative voice ("Create file"), numbered steps, tested examples, error handling</documentation>
<educational>Define terms on first use, examples/analogies, practical applications, clear next steps</educational>
</format_specific_guidelines>

<code_formatting>
<inline>Backticks for: `functions()`, `variables`, `file-paths.js`, commands</inline>
<blocks>Triple backticks with language:
```javascript
function example() {
  return 'properly formatted';
}
```
</blocks>
<consistency>Use code formatting for technical references, not concepts</consistency>
</code_formatting>

<common_mistakes>
<word_pairs>
- its/it's: "Its code" vs "It's working"
- your/you're: "Your app" vs "You're building"
- then/than: "Then deploy" vs "Better than before"
- effect/affect: "The effect" vs "It affects"
</word_pairs>

<structure>
- No run-on sentences
- Fix fragments (unless stylistic)
- Vary sentence length
- Don't end with prepositions (formal mode)
</structure>
</common_mistakes>

<brand_terminology>
<vibe_coding>"vibe coding" (lowercase), "AI-assisted development", "evidence-based", "secure-by-default"</vibe_coding>
<tech_terms>"JavaScript", "GitHub", "TypeScript", "AI-powered" (hyphenated as adjective)</tech_terms>
<preferred>"Create" not "develop", "deploy" not "publish", "build" not "make", "set up" (verb) vs "setup" (noun)</preferred>
<avoid>"Click here", "obviously", "simple/easy", "just" (in instructions), excessive "simply"</avoid>
</brand_terminology>

<numbers_lists>
<numbers>Spell out 1-9, numerals 10+. Always spell if starting sentence. Numerals for percentages/specs.</numbers>
<lists>Parallel structure, consistent punctuation, bullets for unordered, numbers for sequential</lists>
<emphasis>**Bold** for UI/important terms, *italics* for emphasis, `code` for technical, ALL CAPS only for abbreviations</emphasis>
</numbers_lists>

<quick_checklist>
- [ ] Subject-verb agreement correct?
- [ ] Consistent tenses throughout?
- [ ] Oxford commas used?
- [ ] Proper capitalization?
- [ ] Code formatted correctly?
- [ ] Voice mode appropriate for platform?
- [ ] No common word pair mistakes?
- [ ] Clear, actionable message?
</quick_checklist>
